// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc {{.SqlcVersion}}

package {{.Package}}

{{range imports .SourceName}}
{{range .}}import {{.}}
{{end}}
{{end}}

{{range .Queries}}
{{- $ConstantNameSQL := printf "%sSQL" .ConstantName -}}
val {{$ConstantNameSQL}} = {{$.Q}}-- name: {{.MethodName}} {{.Cmd}}
{{.SQL}}
{{$.Q}}

{{if .Ret.EmitStruct}}
case class {{.Ret.Type}} ( {{- range $i, $e := .Ret.Struct.Fields}}
  {{- if $i }},{{end}}
  {{.Name}}: {{.Type}}
  {{- end}}
)
{{end}}
{{end}}

class QueriesImpl(private val conn: Connection) extends Queries {
{{range .Queries}}
{{- $ConstantNameSQL := printf "%sSQL" .ConstantName -}}
{{if eq .Cmd ":one"}}
{{range .Comments}}//{{.}}
{{end}}
  override def {{.MethodName}}({{.Arg.Args}}): Option[{{.Ret.Type}}] = {
    Using.resource(conn.prepareStatement({{$ConstantNameSQL}})) { stmt =>
      {{.Arg.Bindings}}

      val results = stmt.executeQuery()
      Option.when(results.next()) {
        val ret = {{.Ret.ResultSet}}
        if (results.next()) {
          throw SQLException("expected one row in result set, but got many")
        }
        ret
      }
    }
  }
{{end}}

{{if eq .Cmd ":many"}}
{{range .Comments}}//{{.}}
{{end}}
  override def {{.MethodName}}({{.Arg.Args}}): List[{{.Ret.Type}}] = {
    Using.resource(conn.prepareStatement({{$ConstantNameSQL}})) { stmt =>
      {{.Arg.Bindings}}

      val results = stmt.executeQuery()
      val ret = scala.collection.mutable.ListBuffer.empty[{{.Ret.Type}}]
      while (results.next()) {
          ret += {{.Ret.ResultSet}}
      }
      ret.toList
    }
  }
{{end}}

{{if eq .Cmd ":exec"}}
{{range .Comments}}//{{.}}
{{end}}
  {{ if $.EmitInterface }}override {{ end -}}
  override def {{.MethodName}}({{.Arg.Args}}): Unit = {
    Using.resource(conn.prepareStatement({{$ConstantNameSQL}})) { stmt =>
      {{ .Arg.Bindings }}

      stmt.execute()
    }
  }
{{end}}

{{if eq .Cmd ":execrows"}}
{{range .Comments}}//{{.}}
{{end}}
  {{ if $.EmitInterface }}override {{ end -}}
  override def {{.MethodName}}({{.Arg.Args}}): Int = {
    Using.resource(conn.prepareStatement({{$ConstantNameSQL}})) { stmt =>
      {{ .Arg.Bindings }}

      stmt.execute()
      stmt.updateCount
    }
  }
{{end}}

{{if eq .Cmd ":execresult"}}
{{range .Comments}}//{{.}}
{{end}}
  {{ if $.EmitInterface }}override {{ end -}}
  override def {{.MethodName}}({{.Arg.Args}}): Long = {
    Using.resource(conn.prepareStatement({{$ConstantNameSQL}}, Statement.RETURN_GENERATED_KEYS)) { stmt =>
      {{ .Arg.Bindings }}

      stmt.execute()

      val results = stmt.getGeneratedKeys
      if (!results.next()) {
          throw SQLException("no generated key returned")
      }
      results.getLong(1)
    }
  }
{{end}}
{{end}}
}

