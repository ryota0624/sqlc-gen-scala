// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package com.example.manytypes.postgresql

import java.sql.Connection
import java.sql.SQLException
import java.sql.Statement
import java.time.LocalDate
import java.time.LocalDateTime
import java.util.UUID
import scala.util.Using

val insertExampleSQL = """-- name: insertExample :exec
INSERT INTO example_table (dates, timestamps, uuids)
VALUES (?, ?, ?)
"""

val selectExampleSQL = """-- name: selectExample :one
SELECT id, dates, timestamps, uuids FROM example_table
WHERE id = ?
"""

class QueriesImpl(private val conn: Connection) extends Queries {

  override def insertExample(
      dates: Array[LocalDate],
      timestamps: Array[LocalDateTime],
      uuids: Array[UUID]): Unit = {
    Using.resource(conn.prepareStatement(insertExampleSQL)) { stmt =>
      stmt.setArray(1, conn.createArrayOf("date", dates.toArray()))
          stmt.setArray(2, conn.createArrayOf("pg_catalog.timestamp", timestamps.toArray()))
          stmt.setArray(3, conn.createArrayOf("uuid", uuids.toArray()))

      stmt.execute()
    }
  }

  override def selectExample(id: Int): Option[ExampleTable] = {
    Using.resource(conn.prepareStatement(selectExampleSQL)) { stmt =>
      stmt.setInt(1, id)

      val results = stmt.executeQuery()
      Option.when(results.next()) {
        val ret = ExampleTable(
                results.getInt(1),
                results.getArray(2).getArray().asInstanceOf[Array[LocalDate]],
                results.getArray(3).getArray().asInstanceOf[Array[LocalDateTime]],
                results.getArray(4).getArray().asInstanceOf[Array[UUID]]
            )
        if (results.next()) {
          throw SQLException("expected one row in result set, but got many")
        }
        ret
      }
    }
  }

}

