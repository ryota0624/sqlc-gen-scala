// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package com.example.jets

import java.sql.Connection
import java.sql.SQLException
import java.sql.Statement
import scala.util.Using

val countPilotsSQL = """-- name: countPilots :one
SELECT COUNT(*) FROM pilots
"""

val deletePilotSQL = """-- name: deletePilot :exec
DELETE FROM pilots WHERE id = ?
"""

val listPilotsSQL = """-- name: listPilots :many
SELECT id, name FROM pilots LIMIT 5
"""

class QueriesImpl(private val conn: Connection) extends Queries {

  override def countPilots(): Option[Long] = {
    Using.resource(conn.prepareStatement(countPilotsSQL)) { stmt =>
      
      val results = stmt.executeQuery()
      if (!results.next()) {
        return None
      }
      val ret = results.getLong(1)
      if (results.next()) {
          throw SQLException("expected one row in result set, but got many")
      }
      Some(ret)
    }
  }

  override def deletePilot(id: Int): Unit = {
    Using.resource(conn.prepareStatement(deletePilotSQL)) { stmt =>
      stmt.setInt(1, id)

      stmt.execute()
    }
  }

  override def listPilots(): List[Pilot] = {
    Using.resource(conn.prepareStatement(listPilotsSQL)) { stmt =>
      
      val results = stmt.executeQuery()
      val ret = scala.collection.mutable.ListBuffer.empty[Pilot]()
      while (results.next()) {
          ret += (Pilot(
                results.getInt(1),
                results.getString(2)
            ))
      }
      ret
    }
  }

}

