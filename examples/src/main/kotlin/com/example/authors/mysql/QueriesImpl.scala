// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package com.example.authors.mysql

import java.sql.Connection
import java.sql.SQLException
import java.sql.Statement
import scala.util.Using

val createAuthorSQL = """-- name: createAuthor :execresult
INSERT INTO authors (
  name, bio
) VALUES (
  ?, ? 
)
"""

val deleteAuthorSQL = """-- name: deleteAuthor :exec
DELETE FROM authors
WHERE id = ?
"""

val getAuthorSQL = """-- name: getAuthor :one
SELECT id, name, bio FROM authors
WHERE id = ? LIMIT 1
"""

val listAuthorsSQL = """-- name: listAuthors :many
SELECT id, name, bio FROM authors
ORDER BY name
"""

class QueriesImpl(private val conn: Connection) extends Queries {

  override def createAuthor(name: String, bio: Option[String]): Long = {
    Using.resource(conn.prepareStatement(createAuthorSQL, Statement.RETURN_GENERATED_KEYS)) { stmt =>
      stmt.setString(1, name)
          stmt.setString(2, bio.orNull)

      stmt.execute()

      val results = stmt.getGeneratedKeys
      if (!results.next()) {
          throw SQLException("no generated key returned")
      }
      results.getLong(1)
    }
  }

  override def deleteAuthor(id: Long): Unit = {
    Using.resource(conn.prepareStatement(deleteAuthorSQL)) { stmt =>
      stmt.setLong(1, id)

      stmt.execute()
    }
  }

  override def getAuthor(id: Long): Option[Author] = {
    Using.resource(conn.prepareStatement(getAuthorSQL)) { stmt =>
      stmt.setLong(1, id)

      val results = stmt.executeQuery()
      if (!results.next()) {
        return None
      }
      val ret = Author(
                results.getLong(1),
                results.getString(2),
                Option(results.getString(3))
            )
      if (results.next()) {
          throw SQLException("expected one row in result set, but got many")
      }
      Some(ret)
    }
  }

  override def listAuthors(): List[Author] = {
    Using.resource(conn.prepareStatement(listAuthorsSQL)) { stmt =>
      
      val results = stmt.executeQuery()
      val ret = scala.collection.mutable.ListBuffer.empty[Author]()
      while (results.next()) {
          ret += (Author(
                results.getLong(1),
                results.getString(2),
                Option(results.getString(3))
            ))
      }
      ret
    }
  }

}

